# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: dev-library

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  environment:
    BOOK_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    CANDIDATE_EMAIL_TABLE: "candidate-email-${opt:stage, self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"


resources:
  Resources:
    libraryBooks:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "book_id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "book_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.BOOK_TABLE}

functions:
  bookSubmission:
    handler: apis/postbook.newbook
    memorySize: 256
    description: Enter Book Detail to The dynamo DB
    events:
      - http:
          path: newbook
          method: post

  listBooks:
    handler: apis/books.bookslist
    memorySize: 256
    description: List all Books
    events:
      - http: 
          path: bookslist
          method: get    

  UpdateBook:
    handler: apis/updatebook.update
    description: Update book in the library.
    events:
      - http:
          path: books/{id}
          method: put  

  Deletebook:
    handler: apis/deletebook.deletebook
    description: Delete a book from the library.
    events:
      - http:
          path: deletebook/{id}
          method: delete  